<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 - Collision Party</title>
    <style>
        body {
            background-color: #000000;
            margin: 0;
            padding: 0;
            overflow: hidden;
            height: 100vh;
        }

        .bouncer {
            position: absolute;
            font-size: 120px;
            font-family: Arial, sans-serif;
            font-weight: bold;
            color: #ff0000;
            user-select: none;
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>

    <script>
        class Bouncer {
            constructor(element, startX, startY, xSpeed, ySpeed) {
                this.element = element;
                this.x = startX;
                this.y = startY;
                this.xSpeed = xSpeed;
                this.ySpeed = ySpeed;
                this.width = element.offsetWidth;
                this.height = element.offsetHeight;
                const hue = Math.floor(Math.random() * 30);
                this.element.style.color = `hsl(${hue}, 100%, 50%)`;
            }

            update(others) {
                const maxX = window.innerWidth - this.width;
                const maxY = window.innerHeight - this.height;

                if (this.x >= maxX || this.x <= 0) {
                    this.xSpeed = -this.xSpeed;
                    this.x = this.x >= maxX ? maxX : 0;
                }
                if (this.y >= maxY || this.y <= 0) {
                    this.ySpeed = -this.ySpeed;
                    this.y = this.y >= maxY ? maxY : 0;
                }

                others.forEach(other => {
                    if (other === this) return;
                    
                    const dx = other.x - this.x;
                    const dy = other.y - this.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const minDist = (this.width + other.width) / 2;

                    if (distance < minDist) {
                        const angle = Math.atan2(dy, dx);
                        const sin = Math.sin(angle);
                        const cos = Math.cos(angle);

                        const vx1 = this.xSpeed * cos + this.ySpeed * sin;
                        const vy1 = this.ySpeed * cos - this.xSpeed * sin;
                        const vx2 = other.xSpeed * cos + other.ySpeed * sin;
                        const vy2 = other.ySpeed * cos - other.xSpeed * sin;

                        this.xSpeed = vx2 * cos - vy1 * sin;
                        this.ySpeed = vy1 * cos + vx2 * sin;
                        other.xSpeed = vx1 * cos - vy2 * sin;
                        other.ySpeed = vy2 * cos + vx1 * sin;

                        const overlap = minDist - distance;
                        const moveX = (overlap * dx) / distance / 2;
                        const moveY = (overlap * dy) / distance / 2;
                        this.x -= moveX;
                        this.y -= moveY;
                        other.x += moveX;
                        other.y += moveY;
                    }
                });

                this.x += this.xSpeed;
                this.y += this.ySpeed;
                this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;
            }
        }

        const bouncers = Array.from(document.getElementsByClassName('bouncer')).map((el, i, arr) => {
            // Calculate spread starting positions
            const rows = 3;
            const cols = 4;
            const row = Math.floor(i / cols);
            const col = i % cols;
            const spacing = 200;
            
            const startX = (window.innerWidth - (cols * spacing)) / 2 + col * spacing;
            const startY = (window.innerHeight - (rows * spacing)) / 2 + row * spacing;

            return new Bouncer(
                el,
                startX,
                startY,
                3 + Math.random() * 3 * (Math.random() > 0.5 ? 1 : -1),
                3 + Math.random() * 3 * (Math.random() > 0.5 ? 1 : -1)
            );
        });

        function animate() {
            bouncers.forEach(bouncer => bouncer.update(bouncers));
            requestAnimationFrame(animate);
        }

        animate();

        window.addEventListener('resize', () => {
            bouncers.forEach(bouncer => {
                const maxX = window.innerWidth - bouncer.width;
                const maxY = window.innerHeight - bouncer.height;
                bouncer.x = Math.min(bouncer.x, maxX);
                bouncer.y = Math.min(bouncer.y, maxY);
            });
        });
    </script>
</body>
</html>
