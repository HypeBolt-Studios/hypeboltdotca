<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 Asteroids</title>
    <style>
        body {
            background-color: #000000;
            margin: 0;
            padding: 0;
            overflow: hidden;
            height: 100vh;
        }

        .bouncer {
            position: absolute;
            font-size: 120px;
            font-family: Arial, sans-serif;
            font-weight: bold;
            color: #ff0000;
            user-select: none;
            opacity: 0.9;
        }

        #player {
            position: absolute;
            width: 0;
            height: 0;
            border-left: 20px solid transparent;
            border-right: 20px solid transparent;
            border-bottom: 40px solid #f5ea76;
            transform-origin: center 27px;
        }

        .bullet {
            position: absolute;
            width: 4px;
            height: 4px;
            background-color: white;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <div id="player"></div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>

    <script>
        // Previous Bouncer class code remains the same...

        class Player {
            constructor() {
                this.element = document.getElementById('player');
                this.x = window.innerWidth / 2;
                this.y = window.innerHeight / 2;
                this.rotation = 0;
                this.velocity = { x: 0, y: 0 };
                this.speed = 0.5;
                this.friction = 0.98;
                this.bullets = [];
            }

            update() {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.velocity.x *= this.friction;
                this.velocity.y *= this.friction;

                // Screen wrapping
                if (this.x > window.innerWidth) this.x = 0;
                if (this.x < 0) this.x = window.innerWidth;
                if (this.y > window.innerHeight) this.y = 0;
                if (this.y < 0) this.y = window.innerHeight;

                this.element.style.transform = `translate(${this.x}px, ${this.y}px) rotate(${this.rotation}deg)`;
                
                // Update bullets
                this.bullets.forEach((bullet, index) => {
                    bullet.x += bullet.vx;
                    bullet.y += bullet.vy;
                    bullet.element.style.transform = `translate(${bullet.x}px, ${bullet.y}px)`;

                    // Remove bullets that are off screen
                    if (bullet.x < 0 || bullet.x > window.innerWidth || 
                        bullet.y < 0 || bullet.y > window.innerHeight) {
                        bullet.element.remove();
                        this.bullets.splice(index, 1);
                    }
                });
            }

            shoot() {
                const angle = this.rotation * Math.PI / 180;
                const bullet = {
                    x: this.x,
                    y: this.y,
                    vx: Math.sin(angle) * 10,
                    vy: -Math.cos(angle) * 10,
                    element: document.createElement('div')
                };
                bullet.element.className = 'bullet';
                document.body.appendChild(bullet.element);
                this.bullets.push(bullet);
            }
        }

        const player = new Player();
        const keys = {};

        window.addEventListener('keydown', e => keys[e.key] = true);
        window.addEventListener('keyup', e => keys[e.key] = false);

        function spawnNew404() {
            const side = Math.floor(Math.random() * 4);
            let x, y;
            switch(side) {
                case 0: x = -100; y = Math.random() * window.innerHeight; break;
                case 1: x = window.innerWidth + 100; y = Math.random() * window.innerHeight; break;
                case 2: x = Math.random() * window.innerWidth; y = -100; break;
                case 3: x = Math.random() * window.innerWidth; y = window.innerHeight + 100; break;
            }
            const el = document.createElement('div');
            el.className = 'bouncer';
            el.textContent = '404';
            document.body.appendChild(el);
            return new Bouncer(el, x, y, 
                3 + Math.random() * 3 * (Math.random() > 0.5 ? 1 : -1),
                3 + Math.random() * 3 * (Math.random() > 0.5 ? 1 : -1)
            );
        }

        function gameLoop() {
            if (keys.ArrowLeft) player.rotation -= 5;
            if (keys.ArrowRight) player.rotation += 5;
            if (keys.ArrowUp) {
                const angle = player.rotation * Math.PI / 180;
                player.velocity.x += Math.sin(angle) * player.speed;
                player.velocity.y -= Math.cos(angle) * player.speed;
            }
            if (keys[' ']) {
                if (!player.shootCooldown) {
                    player.shoot();
                    player.shootCooldown = true;
                    setTimeout(() => player.shootCooldown = false, 250);
                }
            }

            player.update();

            // Check bullet collisions
            player.bullets.forEach((bullet, bulletIndex) => {
                bouncers.forEach((bouncer, bouncerIndex) => {
                    const dx = bullet.x - bouncer.x;
                    const dy = bullet.y - bouncer.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < 60) {
                        bullet.element.remove();
                        player.bullets.splice(bulletIndex, 1);
                        bouncer.element.remove();
                        bouncers[bouncerIndex] = spawnNew404();
                    }
                });
            });

            bouncers.forEach(bouncer => bouncer.update(bouncers));
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>
