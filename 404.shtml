<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 Space Battle</title>
    <style>
        body {
            background-color: #000000;
            margin: 0;
            padding: 0;
            overflow: hidden;
            height: 100vh;
        }

        .bouncer {
            position: absolute;
            font-size: 60px;
            font-family: Arial, sans-serif;
            font-weight: bold;
            color: #ff0000;
            user-select: none;
            opacity: 0.9;
        }

        #player {
            position: absolute;
            width: 0;
            height: 0;
            border-left: 15px solid transparent;
            border-right: 15px solid transparent;
            border-bottom: 30px solid #f5ea76;
            transform-origin: center 20px;
        }

        #player::after {
            content: '';
            position: absolute;
            width: 4px;
            height: 4px;
            background-color: red;
            border-radius: 50%;
            left: -2px;
            top: -2px;
        }

        .bullet {
            position: absolute;
            width: 4px;
            height: 4px;
            background-color: white;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <div id="player"></div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>
    <div class="bouncer">404</div>

    <script>
        let currentLevel = 404;
        let remainingBouncers = 20;

        class Bouncer {
            constructor(element, startX, startY, xSpeed, ySpeed) {
                this.element = element;
                this.x = startX;
                this.y = startY;
                this.xSpeed = xSpeed;
                this.ySpeed = ySpeed;
                this.width = element.offsetWidth;
                this.height = element.offsetHeight;
                const hue = Math.floor(Math.random() * 30);
                this.element.style.color = `hsl(${hue}, 100%, 50%)`;
            }

            update(others) {
                const maxSpeed = 5;
                this.xSpeed = Math.max(Math.min(this.xSpeed, maxSpeed), -maxSpeed);
                this.ySpeed = Math.max(Math.min(this.ySpeed, maxSpeed), -maxSpeed);

                const maxX = window.innerWidth - this.width;
                const maxY = window.innerHeight - this.height;

                if (this.x >= maxX || this.x <= 0) {
                    this.xSpeed = -this.xSpeed;
                    this.x = this.x >= maxX ? maxX : 0;
                }
                if (this.y >= maxY || this.y <= 0) {
                    this.ySpeed = -this.ySpeed;
                    this.y = this.y >= maxY ? maxY : 0;
                }

                others.forEach(other => {
                    if (other === this) return;
                    
                    const dx = other.x - this.x;
                    const dy = other.y - this.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const minDist = (this.width + other.width) / 2;

                    if (distance < minDist) {
                        const normalX = dx / distance;
                        const normalY = dy / distance;
                        const relativeVelocityX = this.xSpeed - other.xSpeed;
                        const relativeVelocityY = this.ySpeed - other.ySpeed;
                        const impulse = (relativeVelocityX * normalX + relativeVelocityY * normalY) * 1.5;
                        
                        this.xSpeed -= impulse * normalX;
                        this.ySpeed -= impulse * normalY;
                        other.xSpeed += impulse * normalX;
                        other.ySpeed += impulse * normalY;

                        const overlap = minDist - distance;
                        const separationX = overlap * normalX * 0.5;
                        const separationY = overlap * normalY * 0.5;
                        
                        this.x -= separationX;
                        this.y -= separationY;
                        other.x += separationX;
                        other.y += separationY;
                    }
                });

                this.x += this.xSpeed;
                this.y += this.ySpeed;
                this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;
            }
        }

        class Player {
            constructor() {
                this.element = document.getElementById('player');
                this.x = window.innerWidth / 2;
                this.y = window.innerHeight / 2;
                this.rotation = 0;
                this.velocity = { x: 0, y: 0 };
                this.speed = 0.5;
                this.friction = 0.98;
                this.bullets = [];
            }

            update() {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.velocity.x *= this.friction;
                this.velocity.y *= this.friction;

                if (this.x > window.innerWidth) this.x = 0;
                if (this.x < 0) this.x = window.innerWidth;
                if (this.y > window.innerHeight) this.y = 0;
                if (this.y < 0) this.y = window.innerHeight;

                this.element.style.transform = `translate(${this.x}px, ${this.y}px) rotate(${this.rotation}deg)`;
                
                this.bullets.forEach((bullet, index) => {
                    bullet.x += bullet.vx;
                    bullet.y += bullet.vy;

                    // Bounce off screen edges
                    if (bullet.x > window.innerWidth || bullet.x < 0) {
                        bullet.vx = -bullet.vx;
                    }
                    if (bullet.y > window.innerHeight || bullet.y < 0) {
                        bullet.vy = -bullet.vy;
                    }

                    bullet.element.style.transform = `translate(${bullet.x}px, ${bullet.y}px)`;
                });
            }

            shoot() {
                const angle = this.rotation * Math.PI / 180;
                const bullet = {
                    x: this.x,
                    y: this.y,
                    vx: Math.sin(angle) * 10,
                    vy: -Math.cos(angle) * 10,
                    element: document.createElement('div')
                };
                bullet.element.className = 'bullet';
                document.body.appendChild(bullet.element);
                this.bullets.push(bullet);
            }
        }

        function spawnNew404() {
            const side = Math.floor(Math.random() * 4);
            let x, y;
            switch(side) {
                case 0: x = -100; y = Math.random() * window.innerHeight; break;
                case 1: x = window.innerWidth + 100; y = Math.random() * window.innerHeight; break;
                case 2: x = Math.random() * window.innerWidth; y = -100; break;
                case 3: x = Math.random() * window.innerWidth; y = window.innerHeight + 100; break;
            }
            const el = document.createElement('div');
            el.className = 'bouncer';
            el.textContent = currentLevel;
            document.body.appendChild(el);
            return new Bouncer(el, x, y, 
                2 + Math.random() * 2 * (Math.random() > 0.5 ? 1 : -1),
                2 + Math.random() * 2 * (Math.random() > 0.5 ? 1 : -1)
            );
        }

        const player = new Player();
        const keys = {};

        const bouncers = Array.from(document.getElementsByClassName('bouncer')).map((el, i) => {
            const rows = 5;
            const cols = 4;
            const spacing = 180;
            const row = Math.floor(i / cols);
            const col = i % cols;
            
            const startX = (window.innerWidth - (cols * spacing)) / 2 + 
                          col * spacing + 
                          (Math.random() - 0.5) * 50;
            const startY = (window.innerHeight - (rows * spacing)) / 2 + 
                          row * spacing + 
                          (Math.random() - 0.5) * 50;

            el.textContent = currentLevel;
            return new Bouncer(
                el,
                startX,
                startY,
                2 + Math.random() * 2 * (Math.random() > 0.5 ? 1 : -1),
                2 + Math.random() * 2 * (Math.random() > 0.5 ? 1 : -1)
            );
        });

        window.addEventListener('keydown', e => keys[e.key] = true);
        window.addEventListener('keyup', e => keys[e.key] = false);

        function gameLoop() {
            if (keys.ArrowLeft) player.rotation -= 5;
            if (keys.ArrowRight) player.rotation += 5;
            if (keys.ArrowUp) {
                const angle = player.rotation * Math.PI / 180;
                player.velocity.x += Math.sin(angle) * player.speed;
                player.velocity.y -= Math.cos(angle) * player.speed;
            }
            if (keys[' ']) {
                if (!player.shootCooldown) {
                    player.shoot();
                    player.shootCooldown = true;
                    setTimeout(() => player.shootCooldown = false, 100);
                }
            }

            player.update();

            player.bullets.forEach((bullet, bulletIndex) => {
                bouncers.forEach((bouncer, bouncerIndex) => {
                    const dx = bullet.x - bouncer.x;
                    const dy = bullet.y - bouncer.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < 40) {
                        bullet.element.remove();
                        player.bullets.splice(bulletIndex, 1);
                        bouncer.element.remove();
                        bouncers.splice(bouncerIndex, 1);
                        remainingBouncers--;
                        
                        if (remainingBouncers <= 0) {
                            currentLevel++;
                            remainingBouncers = 20;
                            // Spawn new level
                                for (let i = 0; i < 20; i++) {
                            for (let i = 0; i < 20; i++) {
                                bouncers.push(spawnNew404());
                            }
                        }
                    }
                });
            });

            bouncers.forEach(bouncer => bouncer.update(bouncers));
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>

